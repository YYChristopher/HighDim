由于不同实验主要体现在数据集不同，在此主要给出wdbc数据集的实验代码，其他的实验代码类似，故不再赘述。


Lasso作用于wdbc数据集(Lars包)

s<-read.table('C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\大报告\\dataset\\乳腺癌数据集\\wdbc.data.csv',sep = ",")
s <- s[-1,]
y <- as.numeric(s[,2])
nametri <- s[,1]
s <- as.matrix(s)
x <- as.data.frame(apply(s[,3:dim(s)[2]],2,as.numeric))
wdbc <- as.data.frame(cbind(y,x))
p <- dim(wdbc)[2]
#cor(x_std)#计算相关系数矩阵

#分为测试集与验证集探究实验结果：
set.seed(1234)
index <- sample(2,nrow(wdbc),replace = TRUE,prob = c(0.7,0.3))#设立种子并随机抽样，得到训练集与测试集
trainwdbc <- wdbc[index==1,]
testwdbc <- wdbc[index==2,]

##用lars包(最小角回归)计算Lasso解
require(lars)
trainy <- as.vector(trainwdbc[,1])
trainx <- as.matrix(trainwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
M_index_train <- which(trainy==1)
B_index_train <- which(trainy==0)
lassomod <- lars(trainx,trainy,type = "lasso")#用lasso建模
#Lasso图绘制:
plot(lassomod)

#交叉验证选择压缩程度t值:
set.seed(1234)
tcv <- cv.lars(trainx,trainy)
tcv$index[which.min(tcv$cv)]
#lasso的拟合系数结果:
trainfit <- round(predict(lassomod,s=tcv$index[which.min(tcv$cv)],type = "coef",mode = "fraction")$coef,3)
active.index <- which(trainfit!=0)
#用选择的变量进行预测
newtrainx <- as.matrix(trainx[,active.index])
#建立logistic回归模型
glmfit_train <- glm(trainy~newtrainx,data = as.data.frame(cbind(newtrainx,trainy)),family = binomial(link = 'logit'))
summary(glmfit_train)

#预测变量正确率
pred.train <- predict.glm(glmfit_train,newdata = as.data.frame(cbind(newtrainx,trainy)),type = 'response')
pred.train

predi <- function(pred.for){
  pred.result <- rep(0,length(pred.for))
  for(i in 1:length(pred.for)){
    if(pred.for[i]>=0.5){ 
      pred.result[i] <- 1
    }
  }
  return(pred.result)
}

train.result <- predi(pred.train)

pred.diff <- trainy-train.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(train.result)
count_right
rate


predlars <- predict(lassomod,trainx,tcv$index[which.min(tcv$cv)],mode = "fraction")
y_pred_train <- rep(0,length(predlars$fit))
for(i in 1:length(predlars$fit)){
  if(predlars$fit[i]>0){
    y_pred_train[i] <- 1
  }
  else{
    y_pred_train[i] <- 0
  }
}


rmse <- function(x,y) (((x-y)^2))
wrong_num <- sum(rmse(y_pred_train,trainy))
rightrate_train <- (length(trainy)-wrong_num)/length(trainy)

testy <- as.vector(testwdbc[,1])
testx <- as.matrix(testwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
predlars <- predict(lassomod,testx,tcv$index[which.min(tcv$cv)],mode="fraction")
y_pred_test <- rep(0,length(predlars$fit))
for(i in 1:length(predlars$fit)){
  if(predlars$fit[i]>0){
    y_pred_test[i] <- 1
  }
  else{
    y_pred_test[i] <- 0
  }
}

rmse <- function(x,y) (((x-y)^2))
wrong_num <- sum(rmse(y_pred_test,testy))
rightrate_test <- (length(testy)-wrong_num)/length(testy)

newtestx <- as.matrix(testx[,active.index])
#建立logistic回归模型
glmfit_test <- glm(testy~newtestx,data = as.data.frame(cbind(newtestx,testy)),family = binomial(link = 'logit'))
summary(glmfit_test)


#预测变量正确率
pred.test <- predict.glm(glmfit_test,newdata = as.data.frame(cbind(newtestx,testy)),type = 'response')
pred.test

test.result <- predi(pred.test)


#作用于测试集正确率：
pred.diff <- testy-test.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(test.result)
count_right
rate





Lasso作用于wdbc数据集(glmnet包)：

s<-read.table('C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\大报告\\dataset\\乳腺癌数据集\\wdbc.data.csv',sep = ",")
s <- s[-1,]
y <- as.numeric(s[,2])
nametri <- s[,1]
s <- as.matrix(s)
x <- as.data.frame(apply(s[,3:dim(s)[2]],2,as.numeric))
wdbc <- as.data.frame(cbind(y,x))
p <- dim(wdbc)[2]
#cor(x_std)#计算相关系数矩阵

#分为测试集与验证集探究实验结果：
set.seed(1234)
index <- sample(2,nrow(wdbc),replace = TRUE,prob = c(0.7,0.3))#设立种子并随机抽样，得到训练集与测试集
trainwdbc <- wdbc[index==1,]
testwdbc <- wdbc[index==2,]

require(glmnet)
trainy <- as.vector(trainwdbc[,1])
trainx <- as.matrix(trainwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
M_index_train <- which(trainy==1)
B_index_train <- which(trainy==0)
#交叉验证选择
cv.fit<-cv.glmnet(trainx,trainy,family="binomial") 
plot(cv.fit)
cv.fit$lambda.min
cv.fit$lambda.1se
trainfit<-glmnet(trainx,trainy,family="binomial")
plot(trainfit)
coefficients<-coef(trainfit,s=cv.fit$lambda.min)
coefficients <- coefficients[2:length(coefficients)]
Active.Index<-which(coefficients!=0)     #系数不为0的特征索引
Active.coefficients<-coefficients[Active.Index]   #系数不为0的特征系数值
#用选择的变量进行预测
newtrainx <- as.matrix(trainx[,Active.Index])
#建立logistic回归模型
glmfit_train <- glm(trainy~newtrainx,data = as.data.frame(cbind(newtrainx,trainy)),family = binomial(link = 'logit'))
summary(glmfit_train)

#预测变量正确率
pred.train <- predict.glm(glmfit_train,newdata = as.data.frame(cbind(newtrainx,trainy)),type = 'response')
pred.train

predi <- function(pred.for){
  pred.result <- rep(0,length(pred.for))
  for(i in 1:length(pred.for)){
    if(pred.for[i]>=0.5){ 
      pred.result[i] <- 1
    }
  }
  return(pred.result)
}

train.result <- predi(pred.train)

pred.diff <- trainy-train.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(train.result)
count_right
rate

#作用于测试集的结果：
testy <- as.vector(testwdbc[,1])
testx <- as.matrix(testwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
#用选择的变量进行预测
newtestx <- as.matrix(testx[,Active.Index])
#建立logistic回归模型
glmfit_test <- glm(testy~newtestx,data = as.data.frame(cbind(newtestx,testy)),family = binomial(link = 'logit'))
summary(glmfit_test)

#预测变量正确率
pred.test <- predict.glm(glmfit_test,newdata = as.data.frame(cbind(newtestx,testy)),type = 'response')
pred.test

test.result <- predi(pred.test)

#作用于测试集正确率：
pred.diff <- testy-test.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(test.result)
count_right
rate





elastic net作用于wdbc数据集(glmnet):


s<-read.table('C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\大报告\\dataset\\乳腺癌数据集\\wdbc.data.csv',sep = ",")
s <- s[-1,]
y <- as.numeric(s[,2])
nametri <- s[,1]
s <- as.matrix(s)
x <- as.data.frame(apply(s[,3:dim(s)[2]],2,as.numeric))
wdbc <- as.data.frame(cbind(y,x))
p <- dim(wdbc)[2]
#cor(x_std)#计算相关系数矩阵

#分为测试集与验证集探究实验结果：
set.seed(1234)
index <- sample(2,nrow(wdbc),replace = TRUE,prob = c(0.7,0.3))#设立种子并随机抽样，得到训练集与测试集
trainwdbc <- wdbc[index==1,]
testwdbc <- wdbc[index==2,]

require(glmnet)
trainy <- as.vector(trainwdbc[,1])
trainx <- as.matrix(trainwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
M_index_train <- which(trainy==1)
B_index_train <- which(trainy==0)
#交叉验证选择
cv.fit<-cv.glmnet(trainx,trainy,family="binomial") 
plot(cv.fit)
cv.fit$lambda.min
cv.fit$lambda.1se
trainfit<-glmnet(trainx,trainy,family="binomial",alpha = 0.5)
plot(trainfit)
coefficients<-coef(trainfit,s=cv.fit$lambda.min)
coefficients <- coefficients[2:length(coefficients)]
Active.Index<-which(coefficients!=0)     #系数不为0的特征索引
Active.coefficients<-coefficients[Active.Index]   #系数不为0的特征系数值
#用选择的变量进行预测
newtrainx <- as.matrix(trainx[,Active.Index])
#建立logistic回归模型
glmfit_train <- glm(trainy~newtrainx,data = as.data.frame(cbind(newtrainx,trainy)),family = binomial(link = 'logit'))
summary(glmfit_train)

#预测变量正确率
pred.train <- predict.glm(glmfit_train,newdata = as.data.frame(cbind(newtrainx,trainy)),type = 'response')
pred.train

predi <- function(pred.for){
  pred.result <- rep(0,length(pred.for))
  for(i in 1:length(pred.for)){
    if(pred.for[i]>=0.5){ 
      pred.result[i] <- 1
    }
  }
  return(pred.result)
}

train.result <- predi(pred.train)

pred.diff <- trainy-train.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(train.result)
count_right
rate

#作用于测试集的结果：
testy <- as.vector(testwdbc[,1])
testx <- as.matrix(testwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
#用选择的变量进行预测
newtestx <- as.matrix(testx[,Active.Index])
#建立logistic回归模型
glmfit_test <- glm(testy~newtestx,data = as.data.frame(cbind(newtestx,testy)),family = binomial(link = 'logit'))
summary(glmfit_test)

#预测变量正确率
pred.test <- predict.glm(glmfit_test,newdata = as.data.frame(cbind(newtestx,testy)),type = 'response')
pred.test

test.result <- predi(pred.test)

#作用于测试集正确率：
pred.diff <- testy-test.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(test.result)
count_right
rate





自适应Lasso作用于wdbc数据集(msgps包):


s<-read.table('C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\大报告\\dataset\\乳腺癌数据集\\wdbc.data.csv',sep = ",")
s <- s[-1,]
y <- as.numeric(s[,2])
nametri <- s[,1]
s <- as.matrix(s)
x <- as.data.frame(apply(s[,3:dim(s)[2]],2,as.numeric))
wdbc <- as.data.frame(cbind(y,x))
p <- dim(wdbc)[2]
#cor(x_std)#计算相关系数矩阵

#分为测试集与验证集探究实验结果：
set.seed(1234)
index <- sample(2,nrow(wdbc),replace = TRUE,prob = c(0.7,0.3))#设立种子并随机抽样，得到训练集与测试集
trainwdbc <- wdbc[index==1,]
testwdbc <- wdbc[index==2,]

##用msgps包计算Lasso解
require(msgps)
trainy <- as.vector(trainwdbc[,1])
trainx <- as.matrix(trainwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
M_index_train <- which(trainy==1)
B_index_train <- which(trainy==0)

alasso <- msgps(trainx,trainy,penalty="alasso",gamma=1,lambda=0)
summary(alasso)
plot(alasso)
predmsgps <- predict(alasso,trainx)
head(predmsgps)#取头部几个预测值展示出来

predi <- function(pred.for){
  pred.result <- rep(0,length(pred.for))
  for(i in 1:length(pred.for)){
    if(pred.for[i]>=0.5){ 
      pred.result[i] <- 1
    }
  }
  return(pred.result)
}

#用均方根误差衡量预测性能:
rmse <- function(x,y) sqrt(mean((x-y)^2))
#将预测值以0.5为划分依据转化为类别
predres1 <- predi(predmsgps[,1])
predres2 <- predi(predmsgps[,2])
predres3 <- predi(predmsgps[,3])
predres4 <- predi(predmsgps[,4])

#计算分类正确率的函数：
countright <- function(predres,trainy){
  pred.diff <- trainy-predres
  count_right <- tabulate(match(pred.diff,0))
  rate <- count_right/length(predres)
  count_right
  return(rate)
}

#计算不同准则下的分类正确率
rate1 <- countright(predres1,trainy)
rate2 <- countright(predres2,trainy)
rate3 <- countright(predres3,trainy)
rate4 <- countright(predres4,trainy)

testy <- as.vector(testwdbc[,1])
testx <- as.matrix(testwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
predmsgps <- predict(alasso,testx)
head(predmsgps)

#作用于测试集的运算结果：
predres1 <- predi(predmsgps[,1])
predres2 <- predi(predmsgps[,2])
predres3 <- predi(predmsgps[,3])
predres4 <- predi(predmsgps[,4])

#计算不同准则下的分类正确率
rate1 <- countright(predres1,testy)
rate2 <- countright(predres2,testy)
rate3 <- countright(predres3,testy)
rate4 <- countright(predres4,testy)





SCAD作用于wdbc数据集(ncvreg包):


s<-read.table('C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\大报告\\dataset\\乳腺癌数据集\\wdbc.data.csv',sep = ",")
s <- s[-1,]
y <- as.numeric(s[,2])
nametri <- s[,1]
s <- as.matrix(s)
x <- as.data.frame(apply(s[,3:dim(s)[2]],2,as.numeric))
wdbc <- as.data.frame(cbind(y,x))
p <- dim(wdbc)[2]
#cor(x_std)#计算相关系数矩阵

#分为测试集与验证集探究实验结果：
set.seed(1234)
index <- sample(2,nrow(wdbc),replace = TRUE,prob = c(0.7,0.3))#设立种子并随机抽样，得到训练集与测试集
trainwdbc <- wdbc[index==1,]
testwdbc <- wdbc[index==2,]

##用ncvreg包计算Lasso解
require(ncvreg)
trainy <- as.vector(trainwdbc[,1])
trainx <- as.matrix(trainwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
M_index_train <- which(trainy==1)
B_index_train <- which(trainy==0)
#交叉验证选择超参lambda
cv.fit<-cv.ncvreg(trainx,trainy) 
plot(cv.fit)
coef(cv.fit)
cv.fit$lambda.min

trainfit<-ncvreg(trainx,trainy,penalty = "SCAD")
plot(trainfit)
coefficients<-coef(cv.fit)
coefficients <- coefficients[2:length(coefficients)]
Active.Index<-which(coefficients!=0)     #系数不为0的特征索引
Active.coefficients<-coefficients[Active.Index]   #系数不为0的特征系数值
#用选择的变量进行预测
newtrainx <- as.matrix(trainx[,Active.Index])
#建立logistic回归模型
glmfit_train <- glm(trainy~newtrainx,data = as.data.frame(cbind(newtrainx,trainy)),family = binomial(link = 'logit'))
summary(glmfit_train)

#预测变量正确率
pred.train <- predict.glm(glmfit_train,newdata = as.data.frame(cbind(newtrainx,trainy)),type = 'response')
pred.train

predi <- function(pred.for){
  pred.result <- rep(0,length(pred.for))
  for(i in 1:length(pred.for)){
    if(pred.for[i]>=0.5){ 
      pred.result[i] <- 1
    }
  }
  return(pred.result)
}

train.result <- predi(pred.train)

pred.diff <- trainy-train.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(train.result)
count_right
rate

#作用于测试集的结果：
testy <- as.vector(testwdbc[,1])
testx <- as.matrix(testwdbc[,2:p])#需要将数据集变为矩阵形式，否则报错无法运算
#用选择的变量进行预测
newtestx <- as.matrix(testx[,Active.Index])
#建立logistic回归模型
glmfit_test <- glm(testy~newtestx,data = as.data.frame(cbind(newtestx,testy)),family = binomial(link = 'logit'))
summary(glmfit_test)

#预测变量正确率
pred.test <- predict.glm(glmfit_test,newdata = as.data.frame(cbind(newtestx,testy)),type = 'response')
pred.test

test.result <- predi(pred.test)

#作用于测试集正确率：
pred.diff <- testy-test.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(test.result)
count_right
rate




SIR充分降维作用于forest数据集：


s<-read.table('C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\充分降维\\数据集\\Algerian_forest_fires_dataset_UPDATE2.csv',sep = ",")
path="C:\\Users\\user\\Documents\\统计实践与高维\\高维数据推断\\作业\\充分降维\\code"
setwd(path)
source('sequential_test_SAVE.R')
source('sequential_test_SIR.R')
source('SAVE_func.R')
source('SIR_func.R')
s <- as.matrix(s[2:122,])
s <- s[,4:dim(s)[2]]
n <- dim(s)[1]
p <- dim(s)[2]#取出数据表的维数
s <- apply(s, 2, as.numeric)
s <- as.data.frame(s)
x <- s[,1:(p-1)]
y <- s[,p]
y <- as.numeric(y)
h <- 20
#分为测试集与验证集探究实验结果：
set.seed(1234)
index <- sample(2,nrow(wpbc),replace = TRUE,prob = c(0.7,0.3))#设立种子并随机抽样，得到训练集与测试集
trains <- s[index==1,]
tests <- s[index==2,]
trainx <- x[index==1,]
testx <- x[index==2,]
trainy <- y[index==1]
testy <- y[index==2]

for(r in 1:(p-1)){
  testresult <- seqtestsir(trainx,trainy,h,r,"continuous")
  print(testresult)
}
r <- 1
siry <- sir(trainx,trainy,h,r,"continuous")
xnew <- trainx%*%siry
plot(xnew,testy,xlab="x轴",ylab="y轴")

fit_for <- glm(trainy~xnew,data = as.data.frame(cbind(xnew,trainy)),family = binomial(link = 'logit'))
summary(fit_for)

pred.for <- predict.glm(fit_for,newdata = as.data.frame(cbind(xnew,trainy)),type = 'response')
pred.for

pred.result <- rep(0,length(pred.for))
for(i in 1:length(pred.for)){
  if(pred.for[i]>=0.5){ 
    pred.result[i] <- 1
  }
}
pred.diff <- trainy-pred.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(pred.for)
count_right
rate

siry <- sir(testx,testy,h,r,"continuous")
testx <- as.matrix(na.omit(testx))
xnew <- testx%*%siry

pred.for <- predict.glm(fit_for,newdata = as.data.frame(cbind(xnew,testy)),type = 'response')
pred.for

pred.result <- rep(0,length(pred.for))
for(i in 1:length(pred.for)){
  if(pred.for[i]>=0.5){ 
    pred.result[i] <- 1
  }
}
pred.diff <- testy-pred.result
count_right <- tabulate(match(pred.diff,0))
rate <- count_right/length(pred.for)
count_right
rate

